{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Ionian/constants/","text":"Constants These are the magic numbers and stuff for reference. I really hate having to write this. I haven\u2019t really handled the error handling well. Custom Error Codes If your request returns status code 418 (teapot joke status) , then you have received a special error code, congrats! You managed to mess up so bad that we had to invent new error messages just for the occasion!. your custom code is delivered via <response>.customstatuscode . Use the table below to decode the message code error detailed description","title":"Constants"},{"location":"Ionian/constants/#constants","text":"These are the magic numbers and stuff for reference. I really hate having to write this. I haven\u2019t really handled the error handling well.","title":"Constants"},{"location":"Ionian/constants/#custom-error-codes","text":"If your request returns status code 418 (teapot joke status) , then you have received a special error code, congrats! You managed to mess up so bad that we had to invent new error messages just for the occasion!. your custom code is delivered via <response>.customstatuscode . Use the table below to decode the message code error detailed description","title":"Custom Error Codes"},{"location":"Ionian/readme/","text":"","title":"Readme"},{"location":"Ionian/auth/api_keys/","text":"","title":"API Keys"},{"location":"Ionian/auth/logging_in/","text":"","title":"Logging in"},{"location":"Ionian/bots/","text":"Bots API Portal Bot (Object) Bot Stats","title":"Index"},{"location":"Ionian/bots/#bots-api-portal","text":"Bot (Object) Bot Stats","title":"Bots API Portal"},{"location":"Ionian/bots/bot_object/","text":"Bots Table of contents Bots Properties API Requests Paginate Bots TBA Treated natively as (DocSnapshot Object) , but this information is not necessary to non-discordlist developers Description: Bot, document of \u2018bots\u2019 collection NOTICE : On requests, only the properties under public are returned. you do not need to specify <fetch_res_data>.public.<properties> when fetching info. It is only mentioned here for our own staff to understand. Properties public (object, required) id (number, required) - Discord ID of the bot. name (string, required) - Name of the bot. uploaded_on (number, required) - Unix time, firestore serverTimeStamp. creator_id (number, required) - Discord ID of the uploader. creator_name (string | DocumentReference, required) - @TODO either a pointer to users.<user>.name or have the name updated (with discrimnator) icon_URL (string) - Optional URL to the bot icon desired. tags (array (string) , required?) - Tags attached to the bot. description (string, required) - A description describing the bot.` status (object) approvalStatus (enum) pending (string) - Default for users. approved (string) - Note: Mods and Staff get approved automatically. rejected (string) - Moderators have looked through it and rejected it. queue (number) - Number in the queue to be approved by mods. (-1 means is has already been reviewed) stats (object) - Non-public object containing API Bot stats Info - To view more info please visit Bot Stats @TODO Explain EXAMPLE: // Stored (Below) { \"public\": { // root object of response. \"id\": \"1234567890\", \"name\": \"My first bot\", \"uploaded_on\": \"1597373179\", \"creator_id\": \"908765421\", \"creator_name\": \"Wumpus#6969\", \"icon_URL\": \"https://static.discordlist.gg/public/assets/profiles/908765421/1597372331.jpeg\", \"tags\": [\"Utilities\", \"Pokemon\"], \"description\": \"Hey guys i [i]cough[/i] really like this song.\", \"status\": { \"approvalStatus\": \"approved\", \"queue\": \"-1\" }, \"stats\": { // Cannot be grabbed outside of stats endpoints. Not visible. // ... } } } Again, for unelevated users, only the following can be seen: (Elevated users currently cannot see the rest either, however this is being worked on.) // I feel like I need to make this super clear again. // Returns (Below) { \"id\": \"1234567890\", \"name\": \"My first bot\", // ... and so on. note the lack of public object. } json**, xml - json is preferred In fact, I haven\u2019t implemented returning XML yet lol API Requests This is placeholder text for the description that should go here. Paginate Bots Endpoint Method Supports Queries Auth. Required /api/bots/search GET Yes None query : query - the search term page - specifies the required limit @TODO Finish and also provide examples TBA \u2026","title":"Bot Objects"},{"location":"Ionian/bots/bot_object/#bots","text":"Table of contents Bots Properties API Requests Paginate Bots TBA Treated natively as (DocSnapshot Object) , but this information is not necessary to non-discordlist developers Description: Bot, document of \u2018bots\u2019 collection NOTICE : On requests, only the properties under public are returned. you do not need to specify <fetch_res_data>.public.<properties> when fetching info. It is only mentioned here for our own staff to understand.","title":"Bots"},{"location":"Ionian/bots/bot_object/#properties","text":"public (object, required) id (number, required) - Discord ID of the bot. name (string, required) - Name of the bot. uploaded_on (number, required) - Unix time, firestore serverTimeStamp. creator_id (number, required) - Discord ID of the uploader. creator_name (string | DocumentReference, required) - @TODO either a pointer to users.<user>.name or have the name updated (with discrimnator) icon_URL (string) - Optional URL to the bot icon desired. tags (array (string) , required?) - Tags attached to the bot. description (string, required) - A description describing the bot.` status (object) approvalStatus (enum) pending (string) - Default for users. approved (string) - Note: Mods and Staff get approved automatically. rejected (string) - Moderators have looked through it and rejected it. queue (number) - Number in the queue to be approved by mods. (-1 means is has already been reviewed) stats (object) - Non-public object containing API Bot stats Info - To view more info please visit Bot Stats @TODO Explain EXAMPLE: // Stored (Below) { \"public\": { // root object of response. \"id\": \"1234567890\", \"name\": \"My first bot\", \"uploaded_on\": \"1597373179\", \"creator_id\": \"908765421\", \"creator_name\": \"Wumpus#6969\", \"icon_URL\": \"https://static.discordlist.gg/public/assets/profiles/908765421/1597372331.jpeg\", \"tags\": [\"Utilities\", \"Pokemon\"], \"description\": \"Hey guys i [i]cough[/i] really like this song.\", \"status\": { \"approvalStatus\": \"approved\", \"queue\": \"-1\" }, \"stats\": { // Cannot be grabbed outside of stats endpoints. Not visible. // ... } } } Again, for unelevated users, only the following can be seen: (Elevated users currently cannot see the rest either, however this is being worked on.) // I feel like I need to make this super clear again. // Returns (Below) { \"id\": \"1234567890\", \"name\": \"My first bot\", // ... and so on. note the lack of public object. } json**, xml - json is preferred In fact, I haven\u2019t implemented returning XML yet lol","title":"Properties"},{"location":"Ionian/bots/bot_object/#api-requests","text":"This is placeholder text for the description that should go here.","title":"API Requests"},{"location":"Ionian/bots/bot_object/#paginate-bots","text":"Endpoint Method Supports Queries Auth. Required /api/bots/search GET Yes None query : query - the search term page - specifies the required limit @TODO Finish and also provide examples","title":"Paginate Bots"},{"location":"Ionian/bots/bot_object/#tba","text":"\u2026","title":"TBA"},{"location":"Ionian/bots/bot_stats/","text":"Bot Stats This is a property of the bot object. Analytical statistics in raw data on bot activities Table of Contents Bot Stats About Endpoint Requests Headers Response Available Actions Get bot Stats Set bot Stats Update bot Stats @TODO Make sure the behavior of the API actually does as the documentation says it should About Bot statistics are stored as arrays of stat objects. In development, the Bot object contains a stats property which contains a pointer to our \\stats database The following table contains the columns Updatable and Settable . \u200b If a property is updatable , you may provide it in PUT requests, which will aggregate the data submitted to already existing data \u200b If a property is settable , you may provide it in POST requests, which will override existing data with the data submitted. If a property has neither, then it is immutable and is set at creation/automatically generated Okay, this isn\u2019t done on the code yet, so I probably should work on that first before writing this documentation. Oh well~ -kjl3080 Each element contains a object with the following properties: property type description required? Updatable? Settable? id number The ID of the bot Must always be provided . Yes No No creator_id number The ID of the author. Must always be provided. Yes No No timestamp N/A Firebase Timestamp of when this array was pushed. No No No servers number The amount of servers this bot is in. No Yes Yes users number The total amount of users aggregated in all servers this bot is connected to No No Yes commands number Total amount of commands ran since it\u2019s submission on this site No Yes No voice number Time in minutes the bot is in voice chat No Yes No other object * Do not use this, this is to provide backwards compatibility in future updates No No No Developers Note: ~~There are multiple things we might want to do. Should we handle the aggregation of users and stuff ourselves? Yes, I think we should. Well, @TODO then. Another thing is should we include the new amount of each command ran? For \u201cmost used commands and stuff?\u201d~~ we should worry about it in v2. Actually, should we just have POST requests not set, but rather increment the counts? Yeah, okay, sure. uh, we gotta update this section. The following is a stat object. Example: { \"id\":\"1234567890\", // immutable, IDENTITY_KEY \"creator_id\":\"9087654321\", // immutable \"timestamp\": \"183478913\", // immutable \"users\":\"420\", \"commands\":\"2003\", \"voice\":\"133\", \"other\": { // Left here for combatability reasons /* \"top_commands\":[{ \"command\":\"help\", \"count\":\"232\" }, { // ... }] */ } } Endpoint /api/bots/:id/stats Param id : Discord bot\u2019s ID. Currently, we only support the following REST requests: GET - Fetch stored information on bot stats. See Get Bot Stats POST - Send information to set the bot stats. See Update Bot Stats Requests Headers All RESTful requests to /api/bot/:id/stats require the following Header: discord_id (string) - the discord ID of the author of the bot. api_key (string) - Unhashed API Key that belongs to the owner. NOTE: Make sure the api_key is in lowercase! (scopes) (string | array(string)) - Optional The API scopes authorized. Defaults to ['stats'] . If any of the information is invalid, a 400 , 401 or 403 error will be returned. For more information on API Keys, read API Keys . Example: Format: JSON { \"discord_id\":\"123456789\", \"api_key\":\"0dd2aff4-6432-4f30-b3f0-6ecccf0c9192\", \"scopes\": [\"basic\",\"stats\"] } TODO more thoroughly explain how this works in API KEYS Response The response will be returned in JSON Format. Available Actions Get bot Stats Fetches the current bot stats as timestamped array entries. :id is the discord ID of the bot. Returns an array which contains stat object elements. In addition, id , creator_id , and last_updated are returned as well. Endpoint Method Auth Required Path queries? /api/bots/:id/stats GET API_KEY , scopes: ['stats'] Yes Queries: ascending (Boolean, optional) - If the oldest entries should be last. Defaults to false . limit ( number , optional) - How many entries to return. Always counts from the latest entry. Defaults to 200 entries. if the limit is 0, all entries are returned. Is this confusing? I\u2019ll change it later Example : The following request GET https://discordlist.gg/api/bots/123456790/stats?limit=50&ascending=false Assuming proper headers would return { // Identifying information \"id\":\"1234567890\", \"creator_id\":\"9087654321\", \"last_updated\":\"183478913\" // the stats array \"stats\": [ { \"id\":\"55\", // immutable, IDENTITY_KEY // immutable \"timestamp\": \"183478913\" // immutable // ... }, { \"id\":\"213412512\", \"creator_id\":\"9087654321\", \"timestamp\":\"183475313\" // Notice how the time is earlier. This is because of our \"ascending\" setting. // ... } // ... ] } Set bot Stats Description goes here Endpoint Method Auth Required Path queries? /api/bots/:id/stats POST API_KEY , scopes: ['stats'] No The following request must contain the following body explanation goes here example goes here Update bot Stats Description goes here Endpoint Method Auth Required Path queries? /api/bots/:id/stats PUT API_KEY , scopes: ['stats'] No Explanation goes here","title":"Accessing Bot Stats"},{"location":"Ionian/bots/bot_stats/#bot-stats","text":"This is a property of the bot object. Analytical statistics in raw data on bot activities Table of Contents Bot Stats About Endpoint Requests Headers Response Available Actions Get bot Stats Set bot Stats Update bot Stats @TODO Make sure the behavior of the API actually does as the documentation says it should","title":"Bot Stats"},{"location":"Ionian/bots/bot_stats/#about","text":"Bot statistics are stored as arrays of stat objects. In development, the Bot object contains a stats property which contains a pointer to our \\stats database The following table contains the columns Updatable and Settable . \u200b If a property is updatable , you may provide it in PUT requests, which will aggregate the data submitted to already existing data \u200b If a property is settable , you may provide it in POST requests, which will override existing data with the data submitted. If a property has neither, then it is immutable and is set at creation/automatically generated Okay, this isn\u2019t done on the code yet, so I probably should work on that first before writing this documentation. Oh well~ -kjl3080 Each element contains a object with the following properties: property type description required? Updatable? Settable? id number The ID of the bot Must always be provided . Yes No No creator_id number The ID of the author. Must always be provided. Yes No No timestamp N/A Firebase Timestamp of when this array was pushed. No No No servers number The amount of servers this bot is in. No Yes Yes users number The total amount of users aggregated in all servers this bot is connected to No No Yes commands number Total amount of commands ran since it\u2019s submission on this site No Yes No voice number Time in minutes the bot is in voice chat No Yes No other object * Do not use this, this is to provide backwards compatibility in future updates No No No Developers Note: ~~There are multiple things we might want to do. Should we handle the aggregation of users and stuff ourselves? Yes, I think we should. Well, @TODO then. Another thing is should we include the new amount of each command ran? For \u201cmost used commands and stuff?\u201d~~ we should worry about it in v2. Actually, should we just have POST requests not set, but rather increment the counts? Yeah, okay, sure. uh, we gotta update this section. The following is a stat object. Example: { \"id\":\"1234567890\", // immutable, IDENTITY_KEY \"creator_id\":\"9087654321\", // immutable \"timestamp\": \"183478913\", // immutable \"users\":\"420\", \"commands\":\"2003\", \"voice\":\"133\", \"other\": { // Left here for combatability reasons /* \"top_commands\":[{ \"command\":\"help\", \"count\":\"232\" }, { // ... }] */ } }","title":"About"},{"location":"Ionian/bots/bot_stats/#endpoint","text":"/api/bots/:id/stats Param id : Discord bot\u2019s ID. Currently, we only support the following REST requests: GET - Fetch stored information on bot stats. See Get Bot Stats POST - Send information to set the bot stats. See Update Bot Stats","title":"Endpoint"},{"location":"Ionian/bots/bot_stats/#requests","text":"","title":"Requests"},{"location":"Ionian/bots/bot_stats/#headers","text":"All RESTful requests to /api/bot/:id/stats require the following Header: discord_id (string) - the discord ID of the author of the bot. api_key (string) - Unhashed API Key that belongs to the owner. NOTE: Make sure the api_key is in lowercase! (scopes) (string | array(string)) - Optional The API scopes authorized. Defaults to ['stats'] . If any of the information is invalid, a 400 , 401 or 403 error will be returned. For more information on API Keys, read API Keys . Example: Format: JSON { \"discord_id\":\"123456789\", \"api_key\":\"0dd2aff4-6432-4f30-b3f0-6ecccf0c9192\", \"scopes\": [\"basic\",\"stats\"] } TODO more thoroughly explain how this works in API KEYS","title":"Headers"},{"location":"Ionian/bots/bot_stats/#response","text":"The response will be returned in JSON Format.","title":"Response"},{"location":"Ionian/bots/bot_stats/#available-actions","text":"","title":"Available Actions"},{"location":"Ionian/bots/bot_stats/#get-bot-stats","text":"Fetches the current bot stats as timestamped array entries. :id is the discord ID of the bot. Returns an array which contains stat object elements. In addition, id , creator_id , and last_updated are returned as well. Endpoint Method Auth Required Path queries? /api/bots/:id/stats GET API_KEY , scopes: ['stats'] Yes Queries: ascending (Boolean, optional) - If the oldest entries should be last. Defaults to false . limit ( number , optional) - How many entries to return. Always counts from the latest entry. Defaults to 200 entries. if the limit is 0, all entries are returned. Is this confusing? I\u2019ll change it later Example : The following request GET https://discordlist.gg/api/bots/123456790/stats?limit=50&ascending=false Assuming proper headers would return { // Identifying information \"id\":\"1234567890\", \"creator_id\":\"9087654321\", \"last_updated\":\"183478913\" // the stats array \"stats\": [ { \"id\":\"55\", // immutable, IDENTITY_KEY // immutable \"timestamp\": \"183478913\" // immutable // ... }, { \"id\":\"213412512\", \"creator_id\":\"9087654321\", \"timestamp\":\"183475313\" // Notice how the time is earlier. This is because of our \"ascending\" setting. // ... } // ... ] }","title":"Get bot Stats"},{"location":"Ionian/bots/bot_stats/#set-bot-stats","text":"Description goes here Endpoint Method Auth Required Path queries? /api/bots/:id/stats POST API_KEY , scopes: ['stats'] No The following request must contain the following body explanation goes here example goes here","title":"Set bot Stats"},{"location":"Ionian/bots/bot_stats/#update-bot-stats","text":"Description goes here Endpoint Method Auth Required Path queries? /api/bots/:id/stats PUT API_KEY , scopes: ['stats'] No Explanation goes here","title":"Update bot Stats"}]}